{"remainingRequest":"E:\\data\\git\\vue-admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\data\\git\\vue-admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\data\\git\\vue-admin\\vue-element-admin\\src\\utils\\index.js","dependencies":[{"path":"E:\\data\\git\\vue-admin\\vue-element-admin\\src\\utils\\index.js","mtime":1636272798218},{"path":"E:\\data\\git\\vue-admin\\vue-element-admin\\babel.config.js","mtime":1636272798083},{"path":"E:\\data\\git\\vue-admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\data\\git\\vue-admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\data\\git\\vue-admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}